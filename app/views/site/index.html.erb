<% content_for :greeting do %>
<% if @user and !@user.home_lon.nil? and !@user.home_lat.nil? %>
  <%= link_to_function t('layouts.home'), "setPosition(#{@user.home_lat}, #{@user.home_lon}, 10)", { :title => t('layouts.home_tooltip') } %> |
<% end %>
<% end %>

<%= render :partial => 'sidebar', :locals => { :onopen => "resizeMap();", :onclose => "resizeMap();" } %>
<%= render :partial => 'key' %>
<%= render :partial => 'search' %>

<noscript>
  <div id="noscript">
    <p><%= t 'site.index.js_1' %></p>
    <p><%= t 'site.index.js_2' %></p>
    <p><%= t 'site.index.js_3' %></p>
  </div>
</noscript>

<div id="map">
</div>

<div id="permalink">
  <a href="/" id="permalinkanchor"><%= t 'site.index.permalink' %></a><br/>
  <a href="/" id="shortlinkanchor"><%= t 'site.index.shortlink' %></a>
</div>

<div id="attribution">
  <table width="100%">
    <tr>
      <td align="left"><%= t'site.index.license.license_url' %></td>
      <td align="right"><%= t'site.index.license.project_url' %></td>
    </tr>
    <tr>
      <td colspan="2" align="center"><%=
        t'site.index.license.notice',
          :license_name => t('site.index.license.license_name'),
          :project_name => t('site.index.license.project_name')
        %></td>
    </tr>
  </table>
</div>

<%
if params['mlon'] and params['mlat']
    marker = true
    mlon = h(params['mlon'])
    mlat = h(params['mlat'])
end

if params['node'] or params['way'] or params['relation']
    object = true
    object_zoom = true

    if params['node']
        object_type = 'node'
        object_id = h(params['node'])
    elsif params['way']
        object_type = 'way'
        object_id = h(params['way'])
    elsif params['relation']
        object_type = 'relation'
        object_id = h(params['relation'])
    end
end

if params['minlon'] and params['minlat'] and params['maxlon'] and params['maxlat']
    bbox = true
    minlon = h(params['minlon'])
    minlat = h(params['minlat'])
    maxlon = h(params['maxlon'])
    maxlat = h(params['maxlat'])
    box = true if params['box']=="yes"
    object_zoom = false
end

# Decide on a lat lon to initialise the map with. Various ways of doing this
if params['lon'] and params['lat']
    lon =  h(params['lon'])
    lat =  h(params['lat'])
    zoom =  h(params['zoom'] || '5')
    layers = h(params['layers'])
    object_zoom = false
elsif params['mlon'] and params['mlat']
    lon = h(params['mlon'])
    lat = h(params['mlat'])
    zoom =  h(params['zoom'] || '12')
    layers = h(params['layers'])
    object_zoom = false
elsif cookies.key?("_osm_location")
    lon,lat,zoom,layers = cookies["_osm_location"].split("|")
elsif @user and !@user.home_lon.nil? and !@user.home_lat.nil?
    lon =  @user.home_lon
    lat =  @user.home_lat
    zoom = '10'
else
    session[:location] = OSM::IPLocation(request.env['REMOTE_ADDR']) unless session[:location]

    if session[:location]
        bbox = true
        minlon = session[:location][:minlon]
        minlat = session[:location][:minlat]
        maxlon = session[:location][:maxlon]
        maxlat = session[:location][:maxlat]
    else
        lon =  '-0.1'
        lat =  '51.5'
        zoom =  h(params['zoom'] || '5')
    end

    layers = h(params['layers'])
end
%>

<%= javascript_include_tag '/openlayers/OpenLayers.js' %>
<%= javascript_include_tag '/openlayers/OpenStreetMap.js' %>
<%= javascript_include_tag 'map.js' %>

<script type="text/javascript" defer="defer">
  <!--
  var brokenContentSize = $("content").offsetWidth == 0;
  var marker;
  var map;

  OpenLayers.Lang.setCode("<%= I18n.locale.to_s %>");

  function mapInit(){
    map = createMap("map");

    <% unless STATUS == :api_offline or STATUS == :database_offline %>
      map.dataLayer = new OpenLayers.Layer("<%= I18n.t 'browse.start_rjs.data_layer_name' %>", { "visibility": false });
      map.dataLayer.events.register("visibilitychanged", map.dataLayer, toggleData);
      map.addLayer(map.dataLayer);
    <% end %>

    <% unless object_zoom %>
      <% if bbox %>
        var bbox = new OpenLayers.Bounds(<%= minlon %>, <%= minlat %>, <%= maxlon %>, <%= maxlat %>);

        setMapExtent(bbox);

        <% if box %>
          // IE requires Vector layers be initialised on page load, and not under deferred script conditions
          Event.observe(window, 'load', function() { addBoxToMap(bbox) });
        <% end %>
      <% else %>
        var centre = new OpenLayers.LonLat(<%= lon %>, <%= lat %>);
        var zoom = <%= zoom %>;

        <% if params['scale'] and params['scale'].length > 0 then %>
          zoom = scaleToZoom(<%= params['scale'].to_f() %>);
        <% end %>

        setMapCenter(centre, zoom);
      <% end %>

      updateLocation();
    <% end %>

    <% if !layers.nil? and !layers.empty? %>
      setMapLayers("<%= layers %>");
    <% end %>

    <% if marker %>
      marker = addMarkerToMap(new OpenLayers.LonLat(<%= mlon %>, <%= mlat %>));
    <% end %>

    <% if object %>
      var url = "/api/<%= "#{API_VERSION}" %>/<%= object_type %>/<%= object_id %>";

      <% if object_type != "node" %>
        url += "/full";
      <% end %>

      // IE requires Vector layers be initialised on page load, and not under deferred script conditions
      Event.observe(window, 'load', function() { addObjectToMap(url, <%= object_zoom %>) });
    <% end %>

    map.events.register("moveend", map, updateLocation);
    map.events.register("changelayer", map, updateLocation);

    handleResize();
  }

  function toggleData() {
    if (map.dataLayer.visibility) {
      <%= remote_function :url => { :controller => 'browse', :action => 'start' } %>
    } else if (map.dataLayer.active) {
      closeSidebar();
    }
  }

  function getPosition() {
    return getMapCenter();
  }

  function getZoom() {
    return getMapZoom();
  }

  function setPosition(lat, lon, zoom, min_lon, min_lat, max_lon, max_lat) {
    var centre = new OpenLayers.LonLat(lon, lat);

    if (min_lon && min_lat && max_lon && max_lat) {
      var bbox = new OpenLayers.Bounds(min_lon, min_lat, max_lon, max_lat);

      setMapExtent(bbox);
    } else {
      setMapCenter(centre, zoom);
    }

    if (marker)
      removeMarkerFromMap(marker);

    marker = addMarkerToMap(centre, getArrowIcon());
  }

  function updateLocation() {
    var lonlat = getMapCenter();
    var zoom = map.getZoom();
    var layers = getMapLayers();
    var extents = getMapExtent();
    var expiry = new Date();
    var objtype;
    var objid;

    <% if object %>
      objtype = "<%= object_type %>";
      objid = <%= object_id %>;
    <% end %>

    updatelinks(lonlat.lon, lonlat.lat, zoom, layers, extents.left, extents.bottom, extents.right, extents.top, objtype, objid);

    expiry.setYear(expiry.getFullYear() + 10);
    document.cookie = "_osm_location=" + lonlat.lon + "|" + lonlat.lat + "|" + zoom + "|" + layers + "; expires=" + expiry.toGMTString();
  }

  function resizeContent() {
    var content = $("content");
    var rightMargin = parseInt(getStyle(content, "right"));
    var bottomMargin = parseInt(getStyle(content, "bottom"));

    content.style.width = document.documentElement.clientWidth - content.offsetLeft - rightMargin;
    content.style.height = document.documentElement.clientHeight - content.offsetTop - bottomMargin;
  }

  function resizeMap() {
    var centre = map.getCenter();
    var zoom = map.getZoom();
    var sidebar_width = $("sidebar").offsetWidth;

    if (sidebar_width > 0) {
      sidebar_width = sidebar_width + 5
    }

    $("map").style.left = (sidebar_width) + "px";
    $("map").style.width = ($("content").offsetWidth - sidebar_width) + "px";
    $("map").style.height = ($("content").offsetHeight - 2) + "px";

    map.setCenter(centre, zoom);
  }

  function handleResize() {
    if (brokenContentSize) {
      resizeContent();
    }

    resizeMap();
  }

  mapInit();

  window.onload = handleResize;
  window.onresize = handleResize;

  <% if params['action'] == 'export' %>
  <%= remote_function :url => { :controller => 'export', :action => 'start' } %>
  <% end %>
// -->
</script>
