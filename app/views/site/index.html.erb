<% if @user and !@user.home_lon.nil? and !@user.home_lat.nil? %>
  <% content_for :greeting do %>
    <%= link_to_function t('layouts.home'), "setPosition(#{@user.home_lat}, #{@user.home_lon}, 15)", { :title => t('layouts.home_tooltip') } %> |
  <% end %>
<% end %>

<%= render :partial => 'sidebar', :locals => { :onopen => "resizeMap();", :onclose => "resizeMap();" } %>
<%= render :partial => 'key' %>
<%= render :partial => 'search' %>

<noscript>
  <div id="noscript">
    <p><%= t 'site.index.js_1' %></p>
    <p><%= t 'site.index.js_2' %></p>
    <p><%= t 'site.index.js_3' %></p>
  </div>
</noscript>

<div id="map">
  <div id="permalink">
    <a href="/" id="permalinkanchor" class="geolink llz layers object"><%= t 'site.index.permalink' %></a>
    <a href="/" id="shortlinkanchor"><%= t 'site.index.shortlink' %></a>
  </div>
</div>

<iframe id="linkloader" style="display: none">
</iframe>

<div id="attribution">
  <table width="100%">
    <tr>
      <td class="attribution_license"><%= t'site.index.license.license_url' %></td>
      <td class="attribution_project"><%= t'site.index.license.project_url' %></td>
    </tr>
    <tr>
      <td colspan="2" class="attribution_notice"><%=
        t'site.index.license.notice',
          :license_name => t('site.index.license.license_name'),
          :project_name => t('site.index.license.project_name')
        %></td>
    </tr>
  </table>
</div>

<%
if params[:mlon] and params[:mlat]
    marker = true
    mlon = params[:mlon].to_f
    mlat = params[:mlat].to_f
end

if params[:node] or params[:way] or params[:relation]
    object = true
    object_zoom = true

    if params[:node]
        object_type = 'node'
        object_id = params[:node].to_i
    elsif params[:way]
        object_type = 'way'
        object_id = params[:way].to_i
    elsif params[:relation]
        object_type = 'relation'
        object_id = params[:relation].to_i
    end
end

# Decide on a lat lon to initialise the map with. Various ways of doing this
if params[:bbox]
    bbox = true
    minlon, minlat, maxlon, maxlat = params[:bbox].split(",").collect { |c| c.to_f }
    layers = params[:layers]
    box = true if params[:box] == "yes"
    object_zoom = false
elsif params[:minlon] and params[:minlat] and params[:maxlon] and params[:maxlat]
    bbox = true
    minlon = params[:minlon].to_f
    minlat = params[:minlat].to_f
    maxlon = params[:maxlon].to_f
    maxlat = params[:maxlat].to_f
    layers = params[:layers]
    box = true if params[:box]=="yes"
    object_zoom = false
elsif params[:lon] and params[:lat]
    lon =  params[:lon].to_f
    lat =  params[:lat].to_f
    zoom =  params.fetch(:zoom, 5).to_i
    layers = params[:layers]
    object_zoom = false
elsif params[:mlon] and params[:mlat]
    lon = params[:mlon].to_f
    lat = params[:mlat].to_f
    zoom =  params.fetch(:zoom, 12).to_i
    layers = params[:layers]
    object_zoom = false
elsif cookies.key?("_osm_location")
    lon,lat,zoom,layers = cookies["_osm_location"].split("|")
elsif @user and !@user.home_lon.nil? and !@user.home_lat.nil?
    lon =  @user.home_lon
    lat =  @user.home_lat
    zoom = 10
else
    unless STATUS == :database_readonly or STATUS == :database_offline
      session[:location] = OSM::IPLocation(request.env['REMOTE_ADDR']) unless session[:location]
    end

    if session[:location]
        bbox = true
        minlon = session[:location][:minlon]
        minlat = session[:location][:minlat]
        maxlon = session[:location][:maxlon]
        maxlat = session[:location][:maxlat]
    else
        lon =  -0.1
        lat =  51.5
        zoom =  params.fetch(:zoom, 5).to_i
    end

    layers = params[:layers]
end
%>

<%= javascript_include_tag 'openlayers.js' %>
<%= javascript_include_tag 'map.js' %>

<%= render :partial => 'resize' %>

<script type="text/javascript">
  var marker;
  var map;

  OpenLayers.Lang.setCode("<%= I18n.locale.to_s %>");

  function mapInit(){
    map = createMap("map");

    <% unless STATUS == :api_offline or STATUS == :database_offline %>
      map.dataLayer = new OpenLayers.Layer("<%= I18n.t 'browse.start_rjs.data_layer_name' %>", { "visibility": false });
      map.dataLayer.events.register("visibilitychanged", map.dataLayer, toggleData);
      map.addLayer(map.dataLayer);
    <% end %>

    <% unless object_zoom %>
      <% if bbox %>
        var bbox = new OpenLayers.Bounds(<%= minlon %>, <%= minlat %>, <%= maxlon %>, <%= maxlat %>);

        setMapExtent(bbox);

        <% if box %>
          $(window).load(function() { addBoxToMap(bbox) });
        <% end %>
      <% else %>
        var centre = new OpenLayers.LonLat(<%= lon %>, <%= lat %>);
        var zoom = <%= zoom %>;

        <% if params[:scale] and params[:scale].length > 0 then %>
          zoom = scaleToZoom(<%= params[:scale].to_f %>);
        <% end %>

        setMapCenter(centre, zoom);
      <% end %>
    <% end %>

    <% if !layers.nil? and !layers.empty? %>
      setMapLayers("<%= layers %>");
    <% end %>

    <% if marker %>
      marker = addMarkerToMap(new OpenLayers.LonLat(<%= mlon %>, <%= mlat %>));
    <% end %>

    <% if object %>
      var url = "/api/<%= "#{API_VERSION}" %>/<%= object_type %>/<%= object_id %>";

      <% if object_type != "node" %>
        url += "/full";
      <% end %>

      $(window).load(function() { addObjectToMap(url, <%= object_zoom %>) });
    <% end %>

    map.events.register("moveend", map, updateLocation);
    map.events.register("changelayer", map, updateLocation);

    updateLocation();
    handleResize();
  }

  function toggleData() {
    if (map.dataLayer.visibility) {
      $.ajax({ url: "<%= url_for :controller => :browse, :action => :start %>" });
    } else if (map.dataLayer.active) {
      closeSidebar();
    }
  }

  function getPosition() {
    return getMapCenter();
  }

  function getZoom() {
    return getMapZoom();
  }

  function setPosition(lat, lon, zoom, min_lon, min_lat, max_lon, max_lat) {
    var centre = new OpenLayers.LonLat(lon, lat);

    if (min_lon && min_lat && max_lon && max_lat) {
      var bbox = new OpenLayers.Bounds(min_lon, min_lat, max_lon, max_lat);

      setMapExtent(bbox);
    } else {
      setMapCenter(centre, zoom);
    }

    if (marker)
      removeMarkerFromMap(marker);

    marker = addMarkerToMap(centre, getArrowIcon());
  }

  function updateLocation() {
    var lonlat = getMapCenter();
    var zoom = map.getZoom();
    var layers = getMapLayers();
    var extents = getMapExtent();
    var expiry = new Date();
    var objtype;
    var objid;

    <% if object %>
      objtype = "<%= object_type %>";
      objid = <%= object_id %>;
    <% end %>

    updatelinks(lonlat.lon, lonlat.lat, zoom, layers, extents.left, extents.bottom, extents.right, extents.top, objtype, objid);

    expiry.setYear(expiry.getFullYear() + 10);
    document.cookie = "_osm_location=" + lonlat.lon + "|" + lonlat.lat + "|" + zoom + "|" + layers + "; expires=" + expiry.toGMTString();
  }

  function remoteEditHandler(event) {
    var extent = getMapExtent();
    var loaded = false;

    $("#linkloader").load(function () { loaded = true; });
    $("#linkloader").attr("src", "http://127.0.0.1:8111/load_and_zoom?left=" + extent.left + "&top=" + extent.top + "&right=" + extent.right + "&bottom=" + extent.bottom);

    setTimeout(function () {
      if (!loaded) alert("<%=j t('site.index.remote_failed') %>");
    }, 1000);

    return false;
  }

  function installEditHandler() {
    $("#remoteanchor").click(remoteEditHandler);

    <% if preferred_editor == "remote" %>
      $("#editanchor").click(remoteEditHandler);

      <% if params[:action] == "edit" %>
        remoteEditHandler();
      <% end %>
    <% end %>
  }

  $(document).ready(mapInit);
  $(document).ready(installEditHandler);
  $(document).ready(handleResize);

  $(window).resize(function() {
    var centre = map.getCenter();
    var zoom = map.getZoom();

    handleResize();

    map.setCenter(centre, zoom);
  });

  $(document).ready(function () {
    $("#exportanchor").click(function (e) {
      $.ajax({ url: "<%= url_for :controller => :export, :action => :start %>" });
      Event.stop(e);
    });

    <% if params[:action] == 'export' -%>
    $.ajax({ url: "<%= url_for :controller => :export, :action => :start %>" });
    <% end -%>

    <% if params[:query] -%>
    doSearch("<%= params[:query] %>");
    <% end %>
  });
// -->
</script>
