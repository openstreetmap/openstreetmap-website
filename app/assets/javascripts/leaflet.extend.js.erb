L.extend(L.LatLngBounds.prototype, {
  getSize: function () {
    return (this._northEast.lat - this._southWest.lat) *
           (this._northEast.lng - this._southWest.lng);
  },

  wrap: function () {
    return new L.LatLngBounds(this._southWest.wrap(), this._northEast.wrap());
  }
});

L.extend(L.Map.prototype, {
  getLayersCode: function () {
    var layerConfig = '';
    for (var i in this._layers) { // TODO: map.eachLayer
      var layer = this._layers[i];
      if (layer.options && layer.options.code) {
        layerConfig += layer.options.code;
      }
    }
    return layerConfig;
  },

  getMapBaseLayerId: function () {
    for (var i in this._layers) { // TODO: map.eachLayer
      var layer = this._layers[i];
      if (layer.options && layer.options.keyid) return layer.options.keyid;
    }
  },

  getUrl: function(marker) {
    var precision = zoomPrecision(this.getZoom()),
        params = {};

    if (marker && this.hasLayer(marker)) {
      params.mlat = marker.getLatLng().lat.toFixed(precision);
      params.mlon = marker.getLatLng().lng.toFixed(precision);
    }

    var url = 'http://' + OSM.SERVER_URL + '/',
      query = querystring.stringify(params),
      hash = OSM.formatHash(this);

    if (query) url += '?' + query;
    if (hash) url += hash;

    return url;
  },

  getShortUrl: function(marker) {
    var zoom = this.getZoom(),
      latLng = marker && this.hasLayer(marker) ? marker.getLatLng() : this.getCenter(),
      str = '',
      char_array = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_~",
      x = Math.round((latLng.lng + 180.0) * ((1 << 30) / 90.0)),
      y = Math.round((latLng.lat + 90.0) * ((1 << 30) / 45.0)),
      // JavaScript only has to keep 32 bits of bitwise operators, so this has to be
      // done in two parts. each of the parts c1/c2 has 30 bits of the total in it
      // and drops the last 4 bits of the full 64 bit Morton code.
      c1 = interlace(x >>> 17, y >>> 17), c2 = interlace((x >>> 2) & 0x7fff, (y >>> 2) & 0x7fff),
      digit;

    for (var i = 0; i < Math.ceil((zoom + 8) / 3.0) && i < 5; ++i) {
      digit = (c1 >> (24 - 6 * i)) & 0x3f;
      str += char_array.charAt(digit);
    }
    for (i = 5; i < Math.ceil((zoom + 8) / 3.0); ++i) {
      digit = (c2 >> (24 - 6 * (i - 5))) & 0x3f;
      str += char_array.charAt(digit);
    }
    for (i = 0; i < ((zoom + 8) % 3); ++i) str += "-";

    // Called to interlace the bits in x and y, making a Morton code.
    function interlace(x, y) {
      x = (x | (x << 8)) & 0x00ff00ff;
      x = (x | (x << 4)) & 0x0f0f0f0f;
      x = (x | (x << 2)) & 0x33333333;
      x = (x | (x << 1)) & 0x55555555;
      y = (y | (y << 8)) & 0x00ff00ff;
      y = (y | (y << 4)) & 0x0f0f0f0f;
      y = (y | (y << 2)) & 0x33333333;
      y = (y | (y << 1)) & 0x55555555;
      return (x << 1) | y;
    }

    if (marker && this.hasLayer(marker)) {
      str += '?m'
    }

    return (window.location.hostname.match(/^www\.openstreetmap\.org/i) ?
            'http://osm.org/go/' : 'http://' + window.location.hostname + '/go/') + str;
  }
});

L.Icon.Default.imagePath = <%= "#{asset_prefix}/images".to_json %>;

L.Hash.prototype.parseHash = OSM.parseHash;
L.Hash.prototype.formatHash = OSM.formatHash;
