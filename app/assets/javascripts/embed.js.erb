//= depend_on settings.yml
//= depend_on settings.local.yml
//= depend_on layers.yml
//= require leaflet/dist/leaflet-src
//= require leaflet.osm
//= require i18n
//= require i18n/embed

if (navigator.languages) {
  I18n.locale = navigator.languages[0];
} else if (navigator.language) {
  I18n.locale = navigator.language;
}

I18n.default_locale = <%= I18n.default_locale.to_json %>;
I18n.fallbacks = true;

window.onload = function () {
  const args = Object.fromEntries(new URLSearchParams(window.location.search));

  const tileOptions = {
    mapnik: {
<% if Settings.key?(:tile_cdn_url) %>
      url: <%= Settings.tile_cdn_url.to_json %>
<% end %>
    }
  };

  const apiKeys = {
<% if Settings.key?(:thunderforest_key) %>
    THUNDERFOREST_KEY: <%= Settings.thunderforest_key.to_json %>
<% end %>
  };

  var map = L.map("map");
  map.attributionControl.setPrefix("");
  map.removeControl(map.attributionControl);

  const layers = <%=
    YAML.load_file(Rails.root.join("config/layers.yml"))
      .select { |entry| entry["canEmbed"] }
      .each_with_object({}) do |entry, obj|
        obj[entry["layerId"]] = {
          layer: entry["leafletOsmId"],
          apiKeyId: entry["apiKeyId"]
        }.compact
      end.to_json
    %>;
  const layerId = (args.layer || "").replaceAll(" ", "");
  const layerConfig = layers[layerId] || layers.mapnik;
  const { layer, ...options } = {
    layer: layerConfig.layer,
    apikey: apiKeys[layerConfig.apiKeyId],
    ...tileOptions[layerId]
  };
  new L.OSM[layer](options).addTo(map);

  if (args.marker) {
    L.marker(args.marker.split(","), { icon: L.icon({
      iconUrl: <%= asset_path('leaflet/dist/images/marker-icon.png').to_json %>,
      iconSize: new L.Point(25, 41),
      iconAnchor: new L.Point(12, 41),
      shadowUrl: <%= asset_path('leaflet/dist/images/marker-shadow.png').to_json %>,
      shadowSize: new L.Point(41, 41)
    }) }).addTo(map);
  }

  const bbox = (args.bbox || "-180,-90,180,90").split(",");
  map.fitBounds([[bbox[1], bbox[0]], [bbox[3], bbox[2]]]);

  map.addControl(new L.Control.OSMReportAProblem());
};

L.Control.OSMReportAProblem = L.Control.Attribution.extend({
  options: {
    position: "bottomright",
    prefix: `<a href="https://www.openstreetmap.org/fixthemap?lat={x}&lon={y}&zoom={z}" target="_blank">${I18n.t("javascripts.embed.report_problem")}</a>`
  },

  onAdd: function (map) {
    var container = L.Control.Attribution.prototype.onAdd.call(this, map);

    map.on("moveend", this._update, this);

    return container;
  },

  _update: function () {
    L.Control.Attribution.prototype._update.call(this);

    this._container.innerHTML =
      this._container.innerHTML
        .replace("{x}", this._map.getCenter().lat)
        .replace("{y}", this._map.getCenter().lng)
        .replace("{z}", this._map.getZoom());
  }
});
