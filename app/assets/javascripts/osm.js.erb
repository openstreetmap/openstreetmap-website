OSM = {
<% if defined?(PIWIK_LOCATION) and defined?(PIWIK_SITE) %>
  PIWIK_LOCATION:   <%= PIWIK_LOCATION.to_json %>,
  PIWIK_SITE:       <%= PIWIK_SITE.to_json %>,
<% end %>

  MAX_REQUEST_AREA: <%= MAX_REQUEST_AREA.to_json %>,
  SERVER_URL:       <%= SERVER_URL.to_json %>,
  API_VERSION:      <%= API_VERSION.to_json %>,
  STATUS:           <%= STATUS.to_json %>,

  apiUrl: function (object) {
    var url = "/api/" + OSM.API_VERSION + "/" + object.type + "/" + object.id;

    if (object.type != "node") {
      url += "/full";
    } else if (object.version) {
      url += "/" + object.version;
    }

    return url;
  },

  mapParams: function (search) {
    var params = {}, mapParams = {}, loc;

    search = (search || window.location.search).replace('?', '').split(/&|;/);

    for (var i = 0; i < search.length; ++i) {
      var pair = search[i],
        j = pair.indexOf('='),
        key = pair.slice(0, j),
        val = pair.slice(++j);
      params[key] = decodeURIComponent(val);
    }

    if (params.mlon && params.mlat) {
      mapParams.marker = true;
      mapParams.mlon = parseFloat(params.mlon);
      mapParams.mlat = parseFloat(params.mlat);
    }

    if (params.layers) {
      mapParams.layers = params.layers;
    }

    if (params.node || params.way || params.relation) {
      mapParams.object_zoom = true;

      if (params.node) {
        mapParams.object = {type: 'node', id: parseInt(params.node)};
      } else if (params.way) {
        mapParams.object = {type: 'way', id: parseInt(params.way)};
      } else if (params.relation) {
        mapParams.object = {type: 'relation', id: parseInt(params.relation)};
      }
    }

    // Decide on a lat lon to initialise the map with. Various ways of doing this
    if (params.bbox) {
      var bbox = params.bbox.split(",");
      mapParams.bbox = true;
      mapParams.minlon = parseFloat(bbox[0]);
      mapParams.minlat = parseFloat(bbox[1]);
      mapParams.maxlon = parseFloat(bbox[2]);
      mapParams.maxlat = parseFloat(bbox[3]);
      mapParams.object_zoom = false;
    } else if (params.minlon && params.minlat && params.maxlon && params.maxlat) {
      mapParams.bbox = true;
      mapParams.minlon = parseFloat(params.minlon);
      mapParams.minlat = parseFloat(params.minlat);
      mapParams.maxlon = parseFloat(params.maxlon);
      mapParams.maxlat = parseFloat(params.maxlat);
      mapParams.object_zoom = false;
    } else if (params.lon && params.lat) {
      mapParams.lon = parseFloat(params.lon);
      mapParams.lat = parseFloat(params.lat);
      mapParams.zoom = parseInt(params.zoom || 5);
      mapParams.object_zoom = false;
    } else if (params.mlon && params.mlat) {
      mapParams.lon = parseFloat(params.mlon);
      mapParams.lat = parseFloat(params.mlat);
      mapParams.zoom = parseInt(params.zoom || 12);
      mapParams.object_zoom = false;
    } else if (loc = $.cookie('_osm_location')) {
      loc = loc.split("|");
      mapParams.lon = parseFloat(loc[0]);
      mapParams.lat = parseFloat(loc[1]);
      mapParams.zoom = parseInt(loc[2]);
      mapParams.layers = loc[3];
    } else if (OSM.home) {
      mapParams.lon = OSM.home.lon;
      mapParams.lat = OSM.home.lat;
      mapParams.zoom = 10;
    } else if (OSM.location) {
      mapParams.bbox = true;
      mapParams.minlon = OSM.location.minlon;
      mapParams.minlat = OSM.location.minlat;
      mapParams.maxlon = OSM.location.maxlon;
      mapParams.maxlat = OSM.location.maxlat;
    } else {
      mapParams.lon = -0.1;
      mapParams.lat = 51.5;
      mapParams.zoom = parseInt(params.zoom || 5);
    }

    if (mapParams.bbox) {
      mapParams.box = params.box == "yes";
      mapParams.lon = (mapParams.minlon + mapParams.maxlon) / 2;
      mapParams.lat = (mapParams.minlat + mapParams.maxlat) / 2;
    }

    var scale = parseFloat(params.scale);
    if (scale > 0) {
      mapParams.zoom = Math.log(360.0 / (scale * 512.0)) / Math.log(2.0);
    }

    return mapParams;
  }
};
