//= depend_on settings.yml
//= depend_on settings.local.yml
//= depend_on layers.yml
//= depend_on key.yml

OSM = {
  ...<%=
    %i[
      matomo
      max_request_area
      server_protocol
      server_url
      api_version
      status
      max_note_request_area
      overpass_url
      overpass_credentials
      nominatim_url
      graphhopper_url
      fossgis_osrm_url
      fossgis_valhalla_url
      thunderforest_key
      tracestrack_key
    ]
      .each_with_object({}) do |key, hash|
        hash[key.to_s.upcase] = Settings.send(key) if Settings.respond_to?(key)
      end.to_json
  %>,

  DEFAULT_LOCALE: <%= I18n.default_locale.to_json %>,
  AVAILABLE_LOCALES: <%= I18n.available_locales.map(&:to_s).to_json %>,

  LAYER_DEFINITIONS: <%= YAML.load_file(Rails.root.join("config/layers.yml")).to_json %>,
  LAYERS_WITH_MAP_KEY: <%= YAML.load_file(Rails.root.join("config/key.yml")).keys.to_json %>,

  MARKER_GREEN: <%= image_path("marker-green.png").to_json %>,
  MARKER_RED: <%= image_path("marker-red.png").to_json %>,

  MARKER_ICON: <%= image_path("leaflet/dist/images/marker-icon.png").to_json %>,
  MARKER_ICON_2X: <%= image_path("leaflet/dist/images/marker-icon-2x.png").to_json %>,
  MARKER_SHADOW: <%= image_path("leaflet/dist/images/marker-shadow.png").to_json %>,

  NEW_NOTE_MARKER: <%= image_path("new_note_marker.svg").to_json %>,
  OPEN_NOTE_MARKER: <%= image_path("open_note_marker.svg").to_json %>,
  CLOSED_NOTE_MARKER: <%= image_path("closed_note_marker.svg").to_json %>,

  apiUrl: function (object) {
    const apiType = object.type === "note" ? "notes" : object.type;
    let url = "/api/" + OSM.API_VERSION + "/" + apiType + "/" + object.id;

    if (object.type === "way" || object.type === "relation") {
      url += "/full";
    } else if (object.version) {
      url += "/" + object.version;
    }

    return url;
  },

  params: function (search) {
    const query = search || window.location.search;
    return Object.fromEntries(new URLSearchParams(query));
  },

  mapParams: function (search) {
    const params = OSM.params(search),
          mapParams = {};

    if (params.mlon && params.mlat) {
      mapParams.marker = true;
      mapParams.mlon = parseFloat(params.mlon);
      mapParams.mlat = parseFloat(params.mlat);
    }

    // Old-style object parameters; still in use for edit links e.g. /edit?way=1234
    for (const type of ["node", "way", "relation", "note"]) {
      if (params[type]) {
        mapParams.object = { type, id: parseInt(params[type], 10) };
      }
    }

    const hash = OSM.parseHash(location.hash);

    const loc = Cookies.get("_osm_location")?.split("|");

    function bboxToLatLngBounds({ minlon, minlat, maxlon, maxlat }) {
      return L.latLngBounds([minlat, minlon], [maxlat, maxlon]);
    }

    // Decide on a map starting position. Various ways of doing this.
    if (hash.center) {
      mapParams.lon = hash.center.lng;
      mapParams.lat = hash.center.lat;
      mapParams.zoom = hash.zoom;
    } else if (params.bbox) {
      const [minlon, minlat, maxlon, maxlat] = params.bbox.split(",");
      mapParams.bounds = bboxToLatLngBounds({ minlon, minlat, maxlon, maxlat });
    } else if (params.minlon && params.minlat && params.maxlon && params.maxlat) {
      mapParams.bounds = bboxToLatLngBounds(params);
    } else if (params.mlon && params.mlat) {
      mapParams.lon = params.mlon;
      mapParams.lat = params.mlat;
      mapParams.zoom = params.zoom || 12;
    } else if (loc) {
      [mapParams.lon, mapParams.lat, mapParams.zoom] = loc;
    } else if (OSM.home) {
      mapParams.lon = OSM.home.lon;
      mapParams.lat = OSM.home.lat;
      mapParams.zoom = 10;
    } else if (OSM.location) {
      mapParams.bounds = bboxToLatLngBounds(OSM.location);
    } else {
      mapParams.lon = -0.1;
      mapParams.lat = 51.5;
      mapParams.zoom = params.zoom || 5;
    }

    if (typeof mapParams.lat === "string") mapParams.lat = parseFloat(mapParams.lat);
    if (typeof mapParams.lon === "string") mapParams.lon = parseFloat(mapParams.lon);
    if (typeof mapParams.zoom === "string") mapParams.zoom = parseInt(mapParams.zoom, 10);

    mapParams.layers = hash.layers || (loc && loc[3]) || "";

    const scale = parseFloat(params.scale);
    if (scale > 0) {
      mapParams.zoom = Math.log(360.0 / (scale * 512.0)) / Math.log(2.0);
    }

    return mapParams;
  },

  parseHash: function (hash) {
    const args = {};

    const i = hash.indexOf("#");
    if (i < 0) {
      return args;
    }

    const hashParams = new URLSearchParams(hash.slice(i + 1));

    const map = (hashParams.get("map") || "").split("/"),
          zoom = parseInt(map[0], 10),
          lat = parseFloat(map[1]),
          lon = parseFloat(map[2]);

    if (!isNaN(zoom) && !isNaN(lat) && !isNaN(lon)) {
      args.center = new L.LatLng(lat, lon);
      args.zoom = zoom;
    }

    if (hashParams.has("layers")) {
      args.layers = hashParams.get("layers");
    }

    return args;
  },

  formatHash: function (args) {
    let center, zoom, layers;

    if (args instanceof L.Map) {
      center = args.getCenter();
      zoom = args.getZoom();
      layers = args.getLayersCode();
    } else {
      center = args.center || L.latLng(args.lat, args.lon);
      zoom = args.zoom;
      layers = args.layers || "";
    }

    layers = layers.replace("M", "");

    let hash = "#map=" + [zoom, ...OSM.cropLocation(center, zoom)].join("/");

    if (layers) {
      hash += "&layers=" + layers;
    }

    return hash;
  },

  zoomPrecision: function (zoom) {
    const pixels = Math.pow(2, 8 + zoom);
    const degrees = 180;
    return Math.ceil(Math.log10(pixels / degrees));
  },

  cropLocation: function (latLng, zoom) {
    const precision = OSM.zoomPrecision(zoom),
          wrapped = latLng.wrap();
    return [wrapped.lat, wrapped.lng].map(c => c.toFixed(precision));
  },

  locationCookie: function (map) {
    const zoom = map.getZoom(),
          center = OSM.cropLocation(map.getCenter(), zoom).reverse();
    return [...center, zoom, map.getLayersCode()].join("|");
  },

  distance: function (latlng1, latlng2) {
    const lat1 = latlng1.lat * Math.PI / 180,
          lng1 = latlng1.lng * Math.PI / 180,
          lat2 = latlng2.lat * Math.PI / 180,
          lng2 = latlng2.lng * Math.PI / 180,
          latdiff = lat2 - lat1,
          lngdiff = lng2 - lng1;

    return 6372795 * 2 * Math.asin(
      Math.sqrt(
        Math.pow(Math.sin(latdiff / 2), 2) +
        (Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(lngdiff / 2), 2))
      ));
  }
};
